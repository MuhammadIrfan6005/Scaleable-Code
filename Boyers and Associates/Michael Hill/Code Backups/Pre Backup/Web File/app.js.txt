let index = 0;
let spotPrice = 100.00;

const Gold_CARAT = {
    9: .375,
    10: .416,
    14: .585,
    18: .750,
    22: .916
};

let indicators = [];

function initEstimateCalculator() {
    getIndicators();
    addMoreItems();
    getMetelPrice();

}

function calulateGoldPrice(carat, weight, isCash, isGift) {
    const pureGoldValue = Gold_CARAT[carat];

    const materialLossIndicator = indicators.find(ind => ind.name === "Material Loss Indicator").value;
    const giftCardValueIndicator = indicators.find(ind => ind.name === "Gift Card Value Indicator").value;;
    const cashValueIndictor = indicators.find(ind => ind.name === "Cash Value Indictor").value;

    if (isGift) {
        return pureGoldValue *
            Number(weight) *
            materialLossIndicator *
            Number(spotPrice) *
            giftCardValueIndicator;
    }

    if (isCash) {
        return pureGoldValue *
            Number(weight) *
            materialLossIndicator *
            Number(spotPrice) *
            cashValueIndictor;
    }

    return 0;
}

function getMetelPrice() {
    const url = '/cds/?name=getCommodityPrice&symbol=gold';

    $.ajax({
        type: "GET",
        url: url,
        contentType: "application/json"
    }).done(function (data, textStatus, jqXHR) {
        console.log("Ajax completed: " + data);
        if (data) {
            spotPrice = data.price;
            console.log("spotPrice: " + spotPrice);
            $('.gold-price').text(spotPrice);
        }

    }).fail(function (jqXHR, textStatus, errorThrown) {
        console.log("Ajax problem: " + textStatus + ". " + errorThrown);
    });
}

function getIndicators() {
    const url = '/cds/?name=getIndicators';

    $.ajax({
        type: "GET",
        url: url,
        contentType: "application/json"
    }).done(function (data, textStatus, jqXHR) {
        console.log("Ajax completed: " + data);
        if (data) {
            indicators = data;
        }
    }).fail(function (jqXHR, textStatus, errorThrown) {
        console.log("Ajax problem: " + textStatus + ". " + errorThrown);
    });
}

function getFaqList() {
    const url = '/cds/?name=getFaqCategories';

    $.ajax({
        type: "GET",
        url: url,
        contentType: "application/json"
    }).done(function (data, textStatus, jqXHR) {
        if (data) {
            $("#faqListContainer").append(buildFaqListTemplate(data));
        }
    }).fail(function (jqXHR, textStatus, errorThrown) {
        console.log("Ajax problem: " + textStatus + ". " + errorThrown);
    });

}

function getFaqCategoryQuestions() {

    const url = `/cds/?name=getFaqs&category=${$.urlParam('id')}`;

    $.ajax({
        type: "GET",
        url: url,
        contentType: "application/json"
    }).done(function (data, textStatus, jqXHR) {
        if (data) {
            $("#faqQuestionsListContainer").append(buildFaqCategoryListTemplate(data));
            $("#bcFAQ").html(data.title);
            $("#liPageTitle").html(data.title);
        }
    }).fail(function (jqXHR, textStatus, errorThrown) {
        console.log("Ajax problem: " + textStatus + ". " + errorThrown);
    });
}

function selectMetalContent($event, index, value) {
    if ($event)
        $event.preventDefault();

    $('#estimateUnsureWarning').addClass('d-none');

    $($event.target).parentsUntil('.estimateFormGroup').find('button').each(function () {
        $(this).removeClass('btn-primary').attr('style', 'background: #F6F6F6;');
    });

    $($event.target).addClass('btn-primary').removeClass('btn-default').attr('style', '');

    $($event.target).parentsUntil('.estimateFormGroup').find('input[type="hidden"]').val(value);
}

function selectDefaultMetalContent($event, index, value) {
    if ($event)
        $event.preventDefault();

    $($event.target).parentsUntil('.estimateFormGroup').find('button').each(function () {
        $(this).removeClass('btn-primary').attr('style', 'background: #F6F6F6;');
    });

    $($event.target).addClass('btn-primary').removeClass('btn-default').attr('style', '');;

    $('#estimateUnsureWarning').removeClass('d-none');

   // $($($event.target).parentsUntil('.estimateFormGroup').find('button')[0]).addClass('btn-primary')

    $($event.target).parentsUntil('.estimateFormGroup').find('input[type="hidden"]').val(value);
}


function addMetalWeight($event) {
    if ($event)
        $event.preventDefault();

}

function calculateEstimate($event) {
    // get all the inputs into an array.
    var estimateForm = $('#estimateForm');
    var formData = [];
    (function () {
        estimateForm.find('.estimateFormGroup').each(function () {
            let formDataObj = {};
            $(this).find(":input").not("button").each(function () {
                var thisInput = $(this);
                formDataObj[thisInput.attr("name")] = thisInput.val();
            });
            formData.push(formDataObj);
        });
    })();

    console.log(formData);

    calculateTotalEstimate(formData);
}

function calculateTotalEstimate(formData) {
    let totalCost = 0.00;

    formData.forEach(function (item) {
        if (item.metalContent && item.metalWeight) {
            item.price = calulateGoldPrice(item.metalContent, item.metalWeight, false, true);
            totalCost = totalCost + Number(item.price); //(goldPrice * (item.metalContent / 22) * item.metalWeight);
        }
    });

    console.log("totalCost - " + totalCost.toFixed(2));

    $('.estimated-total-Value').text(totalCost.toFixed(2));

    const approvalRequiredIndicator = indicators.find(ind => ind.name === "Maximum Insurance Amount").value;

    if (totalCost > approvalRequiredIndicator) {
        $('#estimateTotalWarning').removeClass('d-none');
        $('#approvalRequiredIndicatorValue').text(Number(approvalRequiredIndicator));
    } else {
        $('#estimateTotalWarning').addClass('d-none');
    }

    createInteraction("Estimator", formData);
}

function addMoreItems($event) {
    if ($event)
        $event.preventDefault();

    const estimateForm = $('#estimateForm');
    estimateForm.append(getTemplate(index++));
}

function getTemplate(index) {
    const estimateFormGroupCount = $('.estimateFormGroup').length;

    return `<div class="estimateFormGroup py-0" id="estimateTemplate_${index}"> 
                 ${index == 0 ? '' : '<div class="divider my-5 w-100"></div>'}                           
                <div>
                    <input type="hidden" name="metalContent" >
                    <div>
                        <label>
                            What is the metal content of your gold?                       
                        </label>
                    </div>
                    <div class="row mb-5">
                        <div class="col-2" style="width:15%">
                            <button name="selectMetalContentBtn" class="btn btn-sm text-dark" style="background: #F6F6F6;" onclick="selectMetalContent(event, ${index}, '9');">9k</button>                           
                        </div>
                        <div class="col-2" style="width:15%">
                            <button name="selectMetalContentBtn" class="btn btn-sm text-dark" style="background: #F6F6F6;"
                                onclick="selectMetalContent(event,${index}, '10');">10k</button>
                        </div>
                        <div class="col-2" style="width:15%">
                            <button name="selectMetalContentBtn" class="btn btn-sm text-dark" style="background: #F6F6F6;"
                                onclick="selectMetalContent(event,${index}, '14');">14k</button>
                        </div>
                        <div class="col-2" style="width:15%">
                            <button name="selectMetalContentBtn" class="btn btn-sm  text-dark" style="background: #F6F6F6;"
                                onclick="selectMetalContent(event,${index}, '18');">18k</button>
                        </div>
                        <div class="col-2" style="width:15%">
                            <button name="selectMetalContentBtn" class="btn btn-sm text-dark" style="background: #F6F6F6;"
                                onclick="selectMetalContent(event,${index}, '22');">22k</button>
                        </div>
                        <div class="col-2" style="width:15%">
                            <button name="selectMetalContentBtn" class="btn btn-sm text-dark" style="background: #F6F6F6;width: 65px;"
                                onclick="selectDefaultMetalContent(event,${index}, '9');">Unsure</button>
                        </div>
                    </div>    
                    <div id="estimateUnsureWarning" class="d-none" style="margin-top: -12px; margin-bottom:12px;">
                        <div class="text-center d-flex py-2 justify-content-center" style="background-color: #f6f6f6;">
                            <div class="material-icons px-2 text-primary">
                               warning_amber
                            </div>
                            <div>
                                If “unsure” selected, estimate will be based on 9k
                            </div>
                        </div>
                    </div>            
                </div>
                <div class="">
                    <div class="col">
                        <label class="">
                            What does your product weigh?                        
                        </label>
                        <div class="d-flex" style="margin-right: 60px;">
                            <input type="number" name="metalWeight" placeholder="0" class="form-control" onclick="addMetalWeight(event);" /> <span class="mx-2 px-2 pt-3 h6" style="font-weight: 400;">grams</span>
                        </div>
                    </div>
                </div>               
            </div>`
}

function getEstimateCalculatorTemplate() {
    return ``;
}

function buildFaqListTemplate(res) {
    let list = "";
    res.forEach(item => {
        list += `<li style="padding: 20px 8px; margin-bottom:12px; background-color:#000000!important;" class="list-group-item text-bg-dark">
                    <a class="text-white" href="/faqs/category?id=${item.id}" style="margin-left:0px;text-decoration: none;">
                      <div class="container">
                            <div class="row">
                                <div class="col-2 col-2 text-end"> 
                                    <span class="material-icons">
                                        ${item.icon}
                                    </span>
                                </div>
                                <div class="col-8 px-1">
                                    <h4 class="mt-1"> ${item.name} </h4>
                                </div>
                                <div class="col-2 text-end">
                                    <span class="material-icons">
                                        chevron_right
                                    </span>                                    
                                </div>
                            </div>
                        </div>
                    </a>
                </li>`;
    });

    return `<ul class="list-group text-white">  
      ${list}
    </ul>`
}

function buildFaqCategoryListTemplate(res) {
    let list = "";
    res.items.forEach((item, index) => {
        list += `<div class="accordion-item">
                    <div class="accordion-header" id="heading_${index}">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapse_${index}" aria-expanded="false" aria-controls="collapse_${index}">
                            ${item.question}
                        </button>
                    </div>
                    <div id="collapse_${index}" class="accordion-collapse collapse" aria-labelledby="heading_${index}"
                        data-bs-parent="#accordionExample">                      
                        <div class="accordion-body p-0 pb-12">
                        ${item.answer}
                        </div>
                    </div>
                </div>`;
    });
    return `<div class="section-content text-white text-center" style="background-image:url(${res.bgimage})"> 
                <div style="margin-bottom:30px;">         
                    <span class="material-icons" style="Width: 28px; Height:28px;">${res.icon}</span>                                     
                </div>
                <h2>                        
                    ${res.title}                      
                </h2>
            </div>
            <div class="accordion accordion-flush gray text-white mx-3 mt-3 pt-1" id="accordionExample">
                ${list}
            </div>`
}

$(document).ready(function () {

    $('.close-navigation').click(function () {
        $('#navbar').removeClass('in');
    });

    $.urlParam = function (name) {
        var results = new RegExp('[\?&]' + name + '=([^&#]*)')
            .exec(window.location.search);

        return (results !== null) ? results[1] || 0 : false;
    }

    setTimeout(function () {
        initEstimateCalculator();
    }, 100)
});